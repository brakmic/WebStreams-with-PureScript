var DemoApp = DemoApp || {}; DemoApp["webstreams"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by psc version 0.8.0.0
	"use strict";
	var Prelude = __webpack_require__(1);
	var Control_Monad_Eff = __webpack_require__(3);
	var Control_Monad_Eff_Console = __webpack_require__(5);
	var API_Web_Streams = __webpack_require__(7);
	var callback = function (result) {
	    return API_Web_Streams.logRaw(result);
	};
	var main = API_Web_Streams.read("https://html.spec.whatwg.org/")(callback);
	module.exports = {
	    main: main, 
	    callback: callback
	};


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by psc version 0.8.0.0
	"use strict";
	var $foreign = __webpack_require__(2);
	var Unit = function (x) {
	    return x;
	};
	var LT = (function () {
	    function LT() {
	
	    };
	    LT.value = new LT();
	    return LT;
	})();
	var GT = (function () {
	    function GT() {
	
	    };
	    GT.value = new GT();
	    return GT;
	})();
	var EQ = (function () {
	    function EQ() {
	
	    };
	    EQ.value = new EQ();
	    return EQ;
	})();
	var Semigroupoid = function (compose) {
	    this.compose = compose;
	};
	var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
	    this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
	    this.id = id;
	};
	var Functor = function (map) {
	    this.map = map;
	};
	var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
	    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
	    this.apply = apply;
	};
	var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
	    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
	    this.pure = pure;
	};
	var Bind = function (__superclass_Prelude$dotApply_0, bind) {
	    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
	    this.bind = bind;
	};
	var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
	    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
	    this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
	};
	var Semigroup = function (append) {
	    this.append = append;
	};
	var Semiring = function (add, mul, one, zero) {
	    this.add = add;
	    this.mul = mul;
	    this.one = one;
	    this.zero = zero;
	};
	var Ring = function (__superclass_Prelude$dotSemiring_0, sub) {
	    this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
	    this.sub = sub;
	};
	var ModuloSemiring = function (__superclass_Prelude$dotSemiring_0, div, mod) {
	    this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
	    this.div = div;
	    this.mod = mod;
	};
	var DivisionRing = function (__superclass_Prelude$dotModuloSemiring_1, __superclass_Prelude$dotRing_0) {
	    this["__superclass_Prelude.ModuloSemiring_1"] = __superclass_Prelude$dotModuloSemiring_1;
	    this["__superclass_Prelude.Ring_0"] = __superclass_Prelude$dotRing_0;
	};
	var Num = function (__superclass_Prelude$dotDivisionRing_0) {
	    this["__superclass_Prelude.DivisionRing_0"] = __superclass_Prelude$dotDivisionRing_0;
	};
	var Eq = function (eq) {
	    this.eq = eq;
	};
	var Ord = function (__superclass_Prelude$dotEq_0, compare) {
	    this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
	    this.compare = compare;
	};
	var Bounded = function (bottom, top) {
	    this.bottom = bottom;
	    this.top = top;
	};
	var BoundedOrd = function (__superclass_Prelude$dotBounded_0, __superclass_Prelude$dotOrd_1) {
	    this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
	    this["__superclass_Prelude.Ord_1"] = __superclass_Prelude$dotOrd_1;
	};
	var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
	    this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
	    this.conj = conj;
	    this.disj = disj;
	    this.not = not;
	};
	var Show = function (show) {
	    this.show = show;
	};
	var $dollar = function (f) {
	    return function (x) {
	        return f(x);
	    };
	};
	var $hash = function (x) {
	    return function (f) {
	        return f(x);
	    };
	};
	var zero = function (dict) {
	    return dict.zero;
	};
	var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
	var unit = {};
	var top = function (dict) {
	    return dict.top;
	};
	var sub = function (dict) {
	    return dict.sub;
	};
	var $minus = function (dictRing) {
	    return sub(dictRing);
	};
	var showUnit = new Show(function (v) {
	    return "unit";
	});
	var showString = new Show($foreign.showStringImpl);
	var showOrdering = new Show(function (v) {
	    if (v instanceof LT) {
	        return "LT";
	    };
	    if (v instanceof GT) {
	        return "GT";
	    };
	    if (v instanceof EQ) {
	        return "EQ";
	    };
	    throw new Error("Failed pattern match at Prelude line 863, column 1 - line 868, column 1: " + [ v.constructor.name ]);
	});
	var showNumber = new Show($foreign.showNumberImpl);
	var showInt = new Show($foreign.showIntImpl);
	var showChar = new Show($foreign.showCharImpl);
	var showBoolean = new Show(function (v) {
	    if (v) {
	        return "true";
	    };
	    if (!v) {
	        return "false";
	    };
	    throw new Error("Failed pattern match at Prelude line 841, column 1 - line 845, column 1: " + [ v.constructor.name ]);
	});
	var show = function (dict) {
	    return dict.show;
	};
	var showArray = function (dictShow) {
	    return new Show($foreign.showArrayImpl(show(dictShow)));
	};
	var semiringUnit = new Semiring(function (v) {
	    return function (v1) {
	        return unit;
	    };
	}, function (v) {
	    return function (v1) {
	        return unit;
	    };
	}, unit, unit);
	var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
	var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
	var semigroupoidFn = new Semigroupoid(function (f) {
	    return function (g) {
	        return function (x) {
	            return f(g(x));
	        };
	    };
	});
	var semigroupUnit = new Semigroup(function (v) {
	    return function (v1) {
	        return unit;
	    };
	});
	var semigroupString = new Semigroup($foreign.concatString);
	var semigroupOrdering = new Semigroup(function (v) {
	    return function (y) {
	        if (v instanceof LT) {
	            return LT.value;
	        };
	        if (v instanceof GT) {
	            return GT.value;
	        };
	        if (v instanceof EQ) {
	            return y;
	        };
	        throw new Error("Failed pattern match at Prelude line 413, column 1 - line 418, column 1: " + [ v.constructor.name, y.constructor.name ]);
	    };
	});
	var semigroupArray = new Semigroup($foreign.concatArray);
	var ringUnit = new Ring(function () {
	    return semiringUnit;
	}, function (v) {
	    return function (v1) {
	        return unit;
	    };
	});
	var ringNumber = new Ring(function () {
	    return semiringNumber;
	}, $foreign.numSub);
	var ringInt = new Ring(function () {
	    return semiringInt;
	}, $foreign.intSub);
	var pure = function (dict) {
	    return dict.pure;
	};
	var $$return = function (dictApplicative) {
	    return pure(dictApplicative);
	};
	var otherwise = true;
	var one = function (dict) {
	    return dict.one;
	};
	var not = function (dict) {
	    return dict.not;
	};
	var negate = function (dictRing) {
	    return function (a) {
	        return $minus(dictRing)(zero(dictRing["__superclass_Prelude.Semiring_0"]()))(a);
	    };
	};
	var mul = function (dict) {
	    return dict.mul;
	};
	var $times = function (dictSemiring) {
	    return mul(dictSemiring);
	};
	var moduloSemiringUnit = new ModuloSemiring(function () {
	    return semiringUnit;
	}, function (v) {
	    return function (v1) {
	        return unit;
	    };
	}, function (v) {
	    return function (v1) {
	        return unit;
	    };
	});
	var moduloSemiringNumber = new ModuloSemiring(function () {
	    return semiringNumber;
	}, $foreign.numDiv, function (v) {
	    return function (v1) {
	        return 0.0;
	    };
	});
	var moduloSemiringInt = new ModuloSemiring(function () {
	    return semiringInt;
	}, $foreign.intDiv, $foreign.intMod);
	var mod = function (dict) {
	    return dict.mod;
	};
	var map = function (dict) {
	    return dict.map;
	};
	var $less$dollar$greater = function (dictFunctor) {
	    return map(dictFunctor);
	};
	var $less$hash$greater = function (dictFunctor) {
	    return function (fa) {
	        return function (f) {
	            return $less$dollar$greater(dictFunctor)(f)(fa);
	        };
	    };
	};
	var id = function (dict) {
	    return dict.id;
	};
	var functorArray = new Functor($foreign.arrayMap);
	var flip = function (f) {
	    return function (b) {
	        return function (a) {
	            return f(a)(b);
	        };
	    };
	};
	var eqUnit = new Eq(function (v) {
	    return function (v1) {
	        return true;
	    };
	});
	var ordUnit = new Ord(function () {
	    return eqUnit;
	}, function (v) {
	    return function (v1) {
	        return EQ.value;
	    };
	});
	var eqString = new Eq($foreign.refEq);
	var ordString = new Ord(function () {
	    return eqString;
	}, unsafeCompare);
	var eqOrdering = new Eq(function (v) {
	    return function (v1) {
	        if (v instanceof LT && v1 instanceof LT) {
	            return true;
	        };
	        if (v instanceof GT && v1 instanceof GT) {
	            return true;
	        };
	        if (v instanceof EQ && v1 instanceof EQ) {
	            return true;
	        };
	        return false;
	    };
	});
	var ordOrdering = new Ord(function () {
	    return eqOrdering;
	}, function (v) {
	    return function (v1) {
	        if (v instanceof LT && v1 instanceof LT) {
	            return EQ.value;
	        };
	        if (v instanceof EQ && v1 instanceof EQ) {
	            return EQ.value;
	        };
	        if (v instanceof GT && v1 instanceof GT) {
	            return EQ.value;
	        };
	        if (v instanceof LT) {
	            return LT.value;
	        };
	        if (v instanceof EQ && v1 instanceof LT) {
	            return GT.value;
	        };
	        if (v instanceof EQ && v1 instanceof GT) {
	            return LT.value;
	        };
	        if (v instanceof GT) {
	            return GT.value;
	        };
	        throw new Error("Failed pattern match at Prelude line 668, column 1 - line 677, column 1: " + [ v.constructor.name, v1.constructor.name ]);
	    };
	});
	var eqNumber = new Eq($foreign.refEq);
	var ordNumber = new Ord(function () {
	    return eqNumber;
	}, unsafeCompare);
	var eqInt = new Eq($foreign.refEq);
	var ordInt = new Ord(function () {
	    return eqInt;
	}, unsafeCompare);
	var eqChar = new Eq($foreign.refEq);
	var ordChar = new Ord(function () {
	    return eqChar;
	}, unsafeCompare);
	var eqBoolean = new Eq($foreign.refEq);
	var ordBoolean = new Ord(function () {
	    return eqBoolean;
	}, unsafeCompare);
	var eq = function (dict) {
	    return dict.eq;
	};
	var $eq$eq = function (dictEq) {
	    return eq(dictEq);
	};
	var eqArray = function (dictEq) {
	    return new Eq($foreign.eqArrayImpl($eq$eq(dictEq)));
	};
	var divisionRingUnit = new DivisionRing(function () {
	    return moduloSemiringUnit;
	}, function () {
	    return ringUnit;
	});
	var numUnit = new Num(function () {
	    return divisionRingUnit;
	});
	var divisionRingNumber = new DivisionRing(function () {
	    return moduloSemiringNumber;
	}, function () {
	    return ringNumber;
	});
	var numNumber = new Num(function () {
	    return divisionRingNumber;
	});
	var div = function (dict) {
	    return dict.div;
	};
	var $div = function (dictModuloSemiring) {
	    return div(dictModuloSemiring);
	};
	var disj = function (dict) {
	    return dict.disj;
	};
	var $bar$bar = function (dictBooleanAlgebra) {
	    return disj(dictBooleanAlgebra);
	};
	var $$const = function (a) {
	    return function (v) {
	        return a;
	    };
	};
	var $$void = function (dictFunctor) {
	    return function (fa) {
	        return $less$dollar$greater(dictFunctor)($$const(unit))(fa);
	    };
	};
	var conj = function (dict) {
	    return dict.conj;
	};
	var $amp$amp = function (dictBooleanAlgebra) {
	    return conj(dictBooleanAlgebra);
	};
	var compose = function (dict) {
	    return dict.compose;
	};
	var functorFn = new Functor(compose(semigroupoidFn));
	var $less$less$less = function (dictSemigroupoid) {
	    return compose(dictSemigroupoid);
	};
	var $greater$greater$greater = function (dictSemigroupoid) {
	    return flip(compose(dictSemigroupoid));
	};
	var compare = function (dict) {
	    return dict.compare;
	};
	var ordArray = function (dictOrd) {
	    return new Ord(function () {
	        return eqArray(dictOrd["__superclass_Prelude.Eq_0"]());
	    }, function (xs) {
	        return function (ys) {
	            return $dollar(compare(ordInt)(0))($foreign.ordArrayImpl(function (x) {
	                return function (y) {
	                    var $78 = compare(dictOrd)(x)(y);
	                    if ($78 instanceof EQ) {
	                        return 0;
	                    };
	                    if ($78 instanceof LT) {
	                        return 1;
	                    };
	                    if ($78 instanceof GT) {
	                        return negate(ringInt)(1);
	                    };
	                    throw new Error("Failed pattern match at Prelude line 660, column 1 - line 666, column 1: " + [ $78.constructor.name ]);
	                };
	            })(xs)(ys));
	        };
	    });
	};
	var $less = function (dictOrd) {
	    return function (a1) {
	        return function (a2) {
	            var $79 = compare(dictOrd)(a1)(a2);
	            if ($79 instanceof LT) {
	                return true;
	            };
	            return false;
	        };
	    };
	};
	var $less$eq = function (dictOrd) {
	    return function (a1) {
	        return function (a2) {
	            var $80 = compare(dictOrd)(a1)(a2);
	            if ($80 instanceof GT) {
	                return false;
	            };
	            return true;
	        };
	    };
	};
	var $greater = function (dictOrd) {
	    return function (a1) {
	        return function (a2) {
	            var $81 = compare(dictOrd)(a1)(a2);
	            if ($81 instanceof GT) {
	                return true;
	            };
	            return false;
	        };
	    };
	};
	var $greater$eq = function (dictOrd) {
	    return function (a1) {
	        return function (a2) {
	            var $82 = compare(dictOrd)(a1)(a2);
	            if ($82 instanceof LT) {
	                return false;
	            };
	            return true;
	        };
	    };
	};
	var categoryFn = new Category(function () {
	    return semigroupoidFn;
	}, function (x) {
	    return x;
	});
	var boundedUnit = new Bounded(unit, unit);
	var boundedOrdering = new Bounded(LT.value, GT.value);
	var boundedOrdUnit = new BoundedOrd(function () {
	    return boundedUnit;
	}, function () {
	    return ordUnit;
	});
	var boundedOrdOrdering = new BoundedOrd(function () {
	    return boundedOrdering;
	}, function () {
	    return ordOrdering;
	});
	var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
	var boundedOrdInt = new BoundedOrd(function () {
	    return boundedInt;
	}, function () {
	    return ordInt;
	});
	var boundedChar = new Bounded($foreign.bottomChar, $foreign.topChar);
	var boundedOrdChar = new BoundedOrd(function () {
	    return boundedChar;
	}, function () {
	    return ordChar;
	});
	var boundedBoolean = new Bounded(false, true);
	var boundedOrdBoolean = new BoundedOrd(function () {
	    return boundedBoolean;
	}, function () {
	    return ordBoolean;
	});
	var bottom = function (dict) {
	    return dict.bottom;
	};
	var boundedFn = function (dictBounded) {
	    return new Bounded(function (v) {
	        return bottom(dictBounded);
	    }, function (v) {
	        return top(dictBounded);
	    });
	};
	var booleanAlgebraUnit = new BooleanAlgebra(function () {
	    return boundedUnit;
	}, function (v) {
	    return function (v1) {
	        return unit;
	    };
	}, function (v) {
	    return function (v1) {
	        return unit;
	    };
	}, function (v) {
	    return unit;
	});
	var booleanAlgebraFn = function (dictBooleanAlgebra) {
	    return new BooleanAlgebra(function () {
	        return boundedFn(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
	    }, function (fx) {
	        return function (fy) {
	            return function (a) {
	                return conj(dictBooleanAlgebra)(fx(a))(fy(a));
	            };
	        };
	    }, function (fx) {
	        return function (fy) {
	            return function (a) {
	                return disj(dictBooleanAlgebra)(fx(a))(fy(a));
	            };
	        };
	    }, function (fx) {
	        return function (a) {
	            return not(dictBooleanAlgebra)(fx(a));
	        };
	    });
	};
	var booleanAlgebraBoolean = new BooleanAlgebra(function () {
	    return boundedBoolean;
	}, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
	var $div$eq = function (dictEq) {
	    return function (x) {
	        return function (y) {
	            return not(booleanAlgebraBoolean)($eq$eq(dictEq)(x)(y));
	        };
	    };
	};
	var bind = function (dict) {
	    return dict.bind;
	};
	var liftM1 = function (dictMonad) {
	    return function (f) {
	        return function (a) {
	            return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v) {
	                return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(f(v));
	            });
	        };
	    };
	};
	var $greater$greater$eq = function (dictBind) {
	    return bind(dictBind);
	};
	var asTypeOf = function (x) {
	    return function (v) {
	        return x;
	    };
	};
	var applyFn = new Apply(function () {
	    return functorFn;
	}, function (f) {
	    return function (g) {
	        return function (x) {
	            return f(x)(g(x));
	        };
	    };
	});
	var bindFn = new Bind(function () {
	    return applyFn;
	}, function (m) {
	    return function (f) {
	        return function (x) {
	            return f(m(x))(x);
	        };
	    };
	});
	var apply = function (dict) {
	    return dict.apply;
	};
	var $less$times$greater = function (dictApply) {
	    return apply(dictApply);
	};
	var liftA1 = function (dictApplicative) {
	    return function (f) {
	        return function (a) {
	            return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
	        };
	    };
	};
	var applicativeFn = new Applicative(function () {
	    return applyFn;
	}, $$const);
	var monadFn = new Monad(function () {
	    return applicativeFn;
	}, function () {
	    return bindFn;
	});
	var append = function (dict) {
	    return dict.append;
	};
	var $plus$plus = function (dictSemigroup) {
	    return append(dictSemigroup);
	};
	var $less$greater = function (dictSemigroup) {
	    return append(dictSemigroup);
	};
	var semigroupFn = function (dictSemigroup) {
	    return new Semigroup(function (f) {
	        return function (g) {
	            return function (x) {
	                return $less$greater(dictSemigroup)(f(x))(g(x));
	            };
	        };
	    });
	};
	var ap = function (dictMonad) {
	    return function (f) {
	        return function (a) {
	            return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
	                return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
	                    return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
	                });
	            });
	        };
	    };
	};
	var monadArray = new Monad(function () {
	    return applicativeArray;
	}, function () {
	    return bindArray;
	});
	var bindArray = new Bind(function () {
	    return applyArray;
	}, $foreign.arrayBind);
	var applyArray = new Apply(function () {
	    return functorArray;
	}, ap(monadArray));
	var applicativeArray = new Applicative(function () {
	    return applyArray;
	}, function (x) {
	    return [ x ];
	});
	var add = function (dict) {
	    return dict.add;
	};
	var $plus = function (dictSemiring) {
	    return add(dictSemiring);
	};
	module.exports = {
	    LT: LT, 
	    GT: GT, 
	    EQ: EQ, 
	    Show: Show, 
	    BooleanAlgebra: BooleanAlgebra, 
	    BoundedOrd: BoundedOrd, 
	    Bounded: Bounded, 
	    Ord: Ord, 
	    Eq: Eq, 
	    DivisionRing: DivisionRing, 
	    Num: Num, 
	    Ring: Ring, 
	    ModuloSemiring: ModuloSemiring, 
	    Semiring: Semiring, 
	    Semigroup: Semigroup, 
	    Monad: Monad, 
	    Bind: Bind, 
	    Applicative: Applicative, 
	    Apply: Apply, 
	    Functor: Functor, 
	    Category: Category, 
	    Semigroupoid: Semigroupoid, 
	    show: show, 
	    "||": $bar$bar, 
	    "&&": $amp$amp, 
	    not: not, 
	    disj: disj, 
	    conj: conj, 
	    bottom: bottom, 
	    top: top, 
	    unsafeCompare: unsafeCompare, 
	    ">=": $greater$eq, 
	    "<=": $less$eq, 
	    ">": $greater, 
	    "<": $less, 
	    compare: compare, 
	    "/=": $div$eq, 
	    "==": $eq$eq, 
	    eq: eq, 
	    "-": $minus, 
	    negate: negate, 
	    sub: sub, 
	    "/": $div, 
	    mod: mod, 
	    div: div, 
	    "*": $times, 
	    "+": $plus, 
	    one: one, 
	    mul: mul, 
	    zero: zero, 
	    add: add, 
	    "++": $plus$plus, 
	    "<>": $less$greater, 
	    append: append, 
	    ap: ap, 
	    liftM1: liftM1, 
	    "return": $$return, 
	    ">>=": $greater$greater$eq, 
	    bind: bind, 
	    liftA1: liftA1, 
	    pure: pure, 
	    "<*>": $less$times$greater, 
	    apply: apply, 
	    "void": $$void, 
	    "<#>": $less$hash$greater, 
	    "<$>": $less$dollar$greater, 
	    map: map, 
	    id: id, 
	    ">>>": $greater$greater$greater, 
	    "<<<": $less$less$less, 
	    compose: compose, 
	    otherwise: otherwise, 
	    asTypeOf: asTypeOf, 
	    "const": $$const, 
	    flip: flip, 
	    "#": $hash, 
	    "$": $dollar, 
	    unit: unit, 
	    semigroupoidFn: semigroupoidFn, 
	    categoryFn: categoryFn, 
	    functorFn: functorFn, 
	    functorArray: functorArray, 
	    applyFn: applyFn, 
	    applyArray: applyArray, 
	    applicativeFn: applicativeFn, 
	    applicativeArray: applicativeArray, 
	    bindFn: bindFn, 
	    bindArray: bindArray, 
	    monadFn: monadFn, 
	    monadArray: monadArray, 
	    semigroupString: semigroupString, 
	    semigroupUnit: semigroupUnit, 
	    semigroupFn: semigroupFn, 
	    semigroupOrdering: semigroupOrdering, 
	    semigroupArray: semigroupArray, 
	    semiringInt: semiringInt, 
	    semiringNumber: semiringNumber, 
	    semiringUnit: semiringUnit, 
	    ringInt: ringInt, 
	    ringNumber: ringNumber, 
	    ringUnit: ringUnit, 
	    moduloSemiringInt: moduloSemiringInt, 
	    moduloSemiringNumber: moduloSemiringNumber, 
	    moduloSemiringUnit: moduloSemiringUnit, 
	    divisionRingNumber: divisionRingNumber, 
	    divisionRingUnit: divisionRingUnit, 
	    numNumber: numNumber, 
	    numUnit: numUnit, 
	    eqBoolean: eqBoolean, 
	    eqInt: eqInt, 
	    eqNumber: eqNumber, 
	    eqChar: eqChar, 
	    eqString: eqString, 
	    eqUnit: eqUnit, 
	    eqArray: eqArray, 
	    eqOrdering: eqOrdering, 
	    ordBoolean: ordBoolean, 
	    ordInt: ordInt, 
	    ordNumber: ordNumber, 
	    ordString: ordString, 
	    ordChar: ordChar, 
	    ordUnit: ordUnit, 
	    ordArray: ordArray, 
	    ordOrdering: ordOrdering, 
	    boundedBoolean: boundedBoolean, 
	    boundedUnit: boundedUnit, 
	    boundedOrdering: boundedOrdering, 
	    boundedInt: boundedInt, 
	    boundedChar: boundedChar, 
	    boundedFn: boundedFn, 
	    boundedOrdBoolean: boundedOrdBoolean, 
	    boundedOrdUnit: boundedOrdUnit, 
	    boundedOrdOrdering: boundedOrdOrdering, 
	    boundedOrdInt: boundedOrdInt, 
	    boundedOrdChar: boundedOrdChar, 
	    booleanAlgebraBoolean: booleanAlgebraBoolean, 
	    booleanAlgebraUnit: booleanAlgebraUnit, 
	    booleanAlgebraFn: booleanAlgebraFn, 
	    showBoolean: showBoolean, 
	    showInt: showInt, 
	    showNumber: showNumber, 
	    showChar: showChar, 
	    showString: showString, 
	    showUnit: showUnit, 
	    showArray: showArray, 
	    showOrdering: showOrdering
	};


/***/ },
/* 2 */
/***/ function(module, exports) {

	/* global exports */
	"use strict";
	
	// module Prelude
	
	//- Functor --------------------------------------------------------------------
	
	exports.arrayMap = function (f) {
	  return function (arr) {
	    var l = arr.length;
	    var result = new Array(l);
	    for (var i = 0; i < l; i++) {
	      result[i] = f(arr[i]);
	    }
	    return result;
	  };
	};
	
	//- Bind -----------------------------------------------------------------------
	
	exports.arrayBind = function (arr) {
	  return function (f) {
	    var result = [];
	    for (var i = 0, l = arr.length; i < l; i++) {
	      Array.prototype.push.apply(result, f(arr[i]));
	    }
	    return result;
	  };
	};
	
	//- Monoid ---------------------------------------------------------------------
	
	exports.concatString = function (s1) {
	  return function (s2) {
	    return s1 + s2;
	  };
	};
	
	exports.concatArray = function (xs) {
	  return function (ys) {
	    return xs.concat(ys);
	  };
	};
	
	//- Semiring -------------------------------------------------------------------
	
	exports.intAdd = function (x) {
	  return function (y) {
	    /* jshint bitwise: false */
	    return x + y | 0;
	  };
	};
	
	exports.intMul = function (x) {
	  return function (y) {
	    /* jshint bitwise: false */
	    return x * y | 0;
	  };
	};
	
	exports.numAdd = function (n1) {
	  return function (n2) {
	    return n1 + n2;
	  };
	};
	
	exports.numMul = function (n1) {
	  return function (n2) {
	    return n1 * n2;
	  };
	};
	
	//- ModuloSemiring -------------------------------------------------------------
	
	exports.intDiv = function (x) {
	  return function (y) {
	    /* jshint bitwise: false */
	    return x / y | 0;
	  };
	};
	
	exports.intMod = function (x) {
	  return function (y) {
	    return x % y;
	  };
	};
	
	exports.numDiv = function (n1) {
	  return function (n2) {
	    return n1 / n2;
	  };
	};
	
	//- Ring -----------------------------------------------------------------------
	
	exports.intSub = function (x) {
	  return function (y) {
	    /* jshint bitwise: false */
	    return x - y | 0;
	  };
	};
	
	exports.numSub = function (n1) {
	  return function (n2) {
	    return n1 - n2;
	  };
	};
	
	//- Eq -------------------------------------------------------------------------
	
	exports.refEq = function (r1) {
	  return function (r2) {
	    return r1 === r2;
	  };
	};
	
	exports.refIneq = function (r1) {
	  return function (r2) {
	    return r1 !== r2;
	  };
	};
	
	exports.eqArrayImpl = function (f) {
	  return function (xs) {
	    return function (ys) {
	      if (xs.length !== ys.length) return false;
	      for (var i = 0; i < xs.length; i++) {
	        if (!f(xs[i])(ys[i])) return false;
	      }
	      return true;
	    };
	  };
	};
	
	exports.ordArrayImpl = function (f) {
	  return function (xs) {
	    return function (ys) {
	      var i = 0;
	      var xlen = xs.length;
	      var ylen = ys.length;
	      while (i < xlen && i < ylen) {
	        var x = xs[i];
	        var y = ys[i];
	        var o = f(x)(y);
	        if (o !== 0) {
	          return o;
	        }
	        i++;
	      }
	      if (xlen === ylen) {
	        return 0;
	      } else if (xlen > ylen) {
	        return -1;
	      } else {
	        return 1;
	      }
	    };
	  };
	};
	
	//- Ord ------------------------------------------------------------------------
	
	exports.unsafeCompareImpl = function (lt) {
	  return function (eq) {
	    return function (gt) {
	      return function (x) {
	        return function (y) {
	          return x < y ? lt : x > y ? gt : eq;
	        };
	      };
	    };
	  };
	};
	
	//- Bounded --------------------------------------------------------------------
	
	exports.topInt = 2147483647;
	exports.bottomInt = -2147483648;
	
	exports.topChar = String.fromCharCode(65535);
	exports.bottomChar = String.fromCharCode(0);
	
	//- BooleanAlgebra -------------------------------------------------------------
	
	exports.boolOr = function (b1) {
	  return function (b2) {
	    return b1 || b2;
	  };
	};
	
	exports.boolAnd = function (b1) {
	  return function (b2) {
	    return b1 && b2;
	  };
	};
	
	exports.boolNot = function (b) {
	  return !b;
	};
	
	//- Show -----------------------------------------------------------------------
	
	exports.showIntImpl = function (n) {
	  return n.toString();
	};
	
	exports.showNumberImpl = function (n) {
	  /* jshint bitwise: false */
	  return n === (n | 0) ? n + ".0" : n.toString();
	};
	
	exports.showCharImpl = function (c) {
	  return c === "'" ? "'\\''" : "'" + c + "'";
	};
	
	exports.showStringImpl = function (s) {
	  return JSON.stringify(s);
	};
	
	exports.showArrayImpl = function (f) {
	  return function (xs) {
	    var ss = [];
	    for (var i = 0, l = xs.length; i < l; i++) {
	      ss[i] = f(xs[i]);
	    }
	    return "[" + ss.join(",") + "]";
	  };
	};


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by psc version 0.8.0.0
	"use strict";
	var $foreign = __webpack_require__(4);
	var Prelude = __webpack_require__(1);
	var monadEff = new Prelude.Monad(function () {
	    return applicativeEff;
	}, function () {
	    return bindEff;
	});
	var bindEff = new Prelude.Bind(function () {
	    return applyEff;
	}, $foreign.bindE);
	var applyEff = new Prelude.Apply(function () {
	    return functorEff;
	}, Prelude.ap(monadEff));
	var applicativeEff = new Prelude.Applicative(function () {
	    return applyEff;
	}, $foreign.returnE);
	var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
	module.exports = {
	    functorEff: functorEff, 
	    applyEff: applyEff, 
	    applicativeEff: applicativeEff, 
	    bindEff: bindEff, 
	    monadEff: monadEff, 
	    foreachE: $foreign.foreachE, 
	    forE: $foreign.forE, 
	    whileE: $foreign.whileE, 
	    untilE: $foreign.untilE, 
	    runPure: $foreign.runPure
	};


/***/ },
/* 4 */
/***/ function(module, exports) {

	/* global exports */
	"use strict";
	
	// module Control.Monad.Eff
	
	exports.returnE = function (a) {
	  return function () {
	    return a;
	  };
	};
	
	exports.bindE = function (a) {
	  return function (f) {
	    return function () {
	      return f(a())();
	    };
	  };
	};
	
	exports.runPure = function (f) {
	  return f();
	};
	
	exports.untilE = function (f) {
	  return function () {
	    while (!f());
	    return {};
	  };
	};
	
	exports.whileE = function (f) {
	  return function (a) {
	    return function () {
	      while (f()) {
	        a();
	      }
	      return {};
	    };
	  };
	};
	
	exports.forE = function (lo) {
	  return function (hi) {
	    return function (f) {
	      return function () {
	        for (var i = lo; i < hi; i++) {
	          f(i)();
	        }
	      };
	    };
	  };
	};
	
	exports.foreachE = function (as) {
	  return function (f) {
	    return function () {
	      for (var i = 0, l = as.length; i < l; i++) {
	        f(as[i])();
	      }
	    };
	  };
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by psc version 0.8.0.0
	"use strict";
	var $foreign = __webpack_require__(6);
	var Prelude = __webpack_require__(1);
	var Control_Monad_Eff = __webpack_require__(3);
	var print = function (dictShow) {
	    return function ($1) {
	        return $foreign.log(Prelude.show(dictShow)($1));
	    };
	};
	module.exports = {
	    print: print, 
	    error: $foreign.error, 
	    log: $foreign.log
	};


/***/ },
/* 6 */
/***/ function(module, exports) {

	/* global exports, console */
	"use strict";
	
	// module Control.Monad.Eff.Console
	
	exports.log = function (s) {
	  return function () {
	    console.log(s);
	    return {};
	  };
	};
	
	exports.error = function (s) {
	  return function () {
	    console.error(s);
	    return {};
	  };
	};


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by psc version 0.8.0.0
	"use strict";
	var $foreign = __webpack_require__(8);
	var Prelude = __webpack_require__(1);
	var Control_Monad_Eff = __webpack_require__(3);
	var Control_Monad_Eff_Console = __webpack_require__(5);
	module.exports = {
	    read: $foreign.read, 
	    logRaw: $foreign.logRaw
	};


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(fetch) {
	// module API.Web.Streams
	
	var logRaw = function(str) {
	  return function() {
	    console.log(str);
	    return {};
	  };
	};
	//read from stream
	//url: resource to read from
	//callback: a PS-function to be called for each stream chunk
	var read = function(url){
	  return function(callback){
	    return function(){
	      var _fetch = fetch(url).then(function(response){
	        var reader = response.body.getReader();
	        var bytesReceived = 0;
	        var complete = null;
	
	        //unlike the original demo from https://jakearchibald.com/2016/streams-ftw/
	        //we `return` the reader.read() Promise to be resolved in our callback.
	        return reader.read().then(function processResult(result){
	                var current = null;
	                if(result.done){
	                  console.log('Fetch completed reading of ' + bytesReceived + ' bytes.');
	                  return complete;
	                }
	                bytesReceived += result.value.length;
	                current = decodeToText(result.value)();
	                complete += current;
	                callback(current)();  //we need extra () when calling from PS
	                return reader.read().then(processResult);
	              });
	
	      }).catch(function(err){
	        console.log('Error while fetching data from ' + url + ', message: ' + err);
	      });
	      wrapper(_fetch)();  //Execute wrapper by giving it the `fetch` function.
	                          //Also, notice the additional pair of (). This is because we have to
	                          //execute the wrapper + the Promise itself. PureScript knows nothing about
	                          //multi-parameter functions. All PS-functions are curried.
	      return {};
	    };
	  };
	};
	
	var decodeToText = function(data){
	  return function(){
	    var decoder = new TextDecoder();
	    return decoder.decode(data, { stream : true });
	  };
	};
	
	//This is a helper for creating internal callbacks to process responses.
	//Basically, we take the original callback from PS and let it `consume` a Promise
	//from JS-part of the app.
	var wrapper = function(val){
	  return function(){
	    val.then(function(v){
	      //do nothing
	    }).catch(function(err){
	      console.error(err);
	    });
	    return {};
	  };
	};
	
	module.exports = {
	  read   : read,
	  logRaw : logRaw
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)))

/***/ },
/* 9 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/*** IMPORTS FROM imports-loader ***/
	(function() {
	
	(function(self) {
	  'use strict';
	
	  if (self.fetch) {
	    return
	  }
	
	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name)
	    }
	    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }
	
	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value)
	    }
	    return value
	  }
	
	  function Headers(headers) {
	    this.map = {}
	
	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value)
	      }, this)
	
	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name])
	      }, this)
	    }
	  }
	
	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name)
	    value = normalizeValue(value)
	    var list = this.map[name]
	    if (!list) {
	      list = []
	      this.map[name] = list
	    }
	    list.push(value)
	  }
	
	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)]
	  }
	
	  Headers.prototype.get = function(name) {
	    var values = this.map[normalizeName(name)]
	    return values ? values[0] : null
	  }
	
	  Headers.prototype.getAll = function(name) {
	    return this.map[normalizeName(name)] || []
	  }
	
	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  }
	
	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = [normalizeValue(value)]
	  }
	
	  Headers.prototype.forEach = function(callback, thisArg) {
	    Object.getOwnPropertyNames(this.map).forEach(function(name) {
	      this.map[name].forEach(function(value) {
	        callback.call(thisArg, value, name, this)
	      }, this)
	    }, this)
	  }
	
	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true
	  }
	
	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result)
	      }
	      reader.onerror = function() {
	        reject(reader.error)
	      }
	    })
	  }
	
	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader()
	    reader.readAsArrayBuffer(blob)
	    return fileReaderReady(reader)
	  }
	
	  function readBlobAsText(blob) {
	    var reader = new FileReader()
	    reader.readAsText(blob)
	    return fileReaderReady(reader)
	  }
	
	  var support = {
	    blob: 'FileReader' in self && 'Blob' in self && (function() {
	      try {
	        new Blob();
	        return true
	      } catch(e) {
	        return false
	      }
	    })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  }
	
	  function Body() {
	    this.bodyUsed = false
	
	
	    this._initBody = function(body) {
	      this._bodyInit = body
	      if (typeof body === 'string') {
	        this._bodyText = body
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body
	      } else if (!body) {
	        this._bodyText = ''
	      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {
	        // Only support ArrayBuffers for POST method.
	        // Receiving ArrayBuffers happens via Blobs, instead.
	      } else {
	        throw new Error('unsupported BodyInit type')
	      }
	
	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8')
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type)
	        }
	      }
	    }
	
	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }
	
	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      }
	
	      this.arrayBuffer = function() {
	        return this.blob().then(readBlobAsArrayBuffer)
	      }
	
	      this.text = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }
	
	        if (this._bodyBlob) {
	          return readBlobAsText(this._bodyBlob)
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as text')
	        } else {
	          return Promise.resolve(this._bodyText)
	        }
	      }
	    } else {
	      this.text = function() {
	        var rejected = consumed(this)
	        return rejected ? rejected : Promise.resolve(this._bodyText)
	      }
	    }
	
	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      }
	    }
	
	    this.json = function() {
	      return this.text().then(JSON.parse)
	    }
	
	    return this
	  }
	
	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']
	
	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase()
	    return (methods.indexOf(upcased) > -1) ? upcased : method
	  }
	
	  function Request(input, options) {
	    options = options || {}
	    var body = options.body
	    if (Request.prototype.isPrototypeOf(input)) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url
	      this.credentials = input.credentials
	      if (!options.headers) {
	        this.headers = new Headers(input.headers)
	      }
	      this.method = input.method
	      this.mode = input.mode
	      if (!body) {
	        body = input._bodyInit
	        input.bodyUsed = true
	      }
	    } else {
	      this.url = input
	    }
	
	    this.credentials = options.credentials || this.credentials || 'omit'
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers)
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET')
	    this.mode = options.mode || this.mode || null
	    this.referrer = null
	
	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body)
	  }
	
	  Request.prototype.clone = function() {
	    return new Request(this)
	  }
	
	  function decode(body) {
	    var form = new FormData()
	    body.trim().split('&').forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=')
	        var name = split.shift().replace(/\+/g, ' ')
	        var value = split.join('=').replace(/\+/g, ' ')
	        form.append(decodeURIComponent(name), decodeURIComponent(value))
	      }
	    })
	    return form
	  }
	
	  function headers(xhr) {
	    var head = new Headers()
	    var pairs = xhr.getAllResponseHeaders().trim().split('\n')
	    pairs.forEach(function(header) {
	      var split = header.trim().split(':')
	      var key = split.shift().trim()
	      var value = split.join(':').trim()
	      head.append(key, value)
	    })
	    return head
	  }
	
	  Body.call(Request.prototype)
	
	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {}
	    }
	
	    this.type = 'default'
	    this.status = options.status
	    this.ok = this.status >= 200 && this.status < 300
	    this.statusText = options.statusText
	    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)
	    this.url = options.url || ''
	    this._initBody(bodyInit)
	  }
	
	  Body.call(Response.prototype)
	
	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  }
	
	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''})
	    response.type = 'error'
	    return response
	  }
	
	  var redirectStatuses = [301, 302, 303, 307, 308]
	
	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }
	
	    return new Response(null, {status: status, headers: {location: url}})
	  }
	
	  self.Headers = Headers;
	  self.Request = Request;
	  self.Response = Response;
	
	  self.fetch = function(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request
	      if (Request.prototype.isPrototypeOf(input) && !init) {
	        request = input
	      } else {
	        request = new Request(input, init)
	      }
	
	      var xhr = new XMLHttpRequest()
	
	      function responseURL() {
	        if ('responseURL' in xhr) {
	          return xhr.responseURL
	        }
	
	        // Avoid security warnings on getResponseHeader when not allowed by CORS
	        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
	          return xhr.getResponseHeader('X-Request-URL')
	        }
	
	        return;
	      }
	
	      xhr.onload = function() {
	        var status = (xhr.status === 1223) ? 204 : xhr.status
	        if (status < 100 || status > 599) {
	          reject(new TypeError('Network request failed'))
	          return
	        }
	        var options = {
	          status: status,
	          statusText: xhr.statusText,
	          headers: headers(xhr),
	          url: responseURL()
	        }
	        var body = 'response' in xhr ? xhr.response : xhr.responseText;
	        resolve(new Response(body, options))
	      }
	
	      xhr.onerror = function() {
	        reject(new TypeError('Network request failed'))
	      }
	
	      xhr.open(request.method, request.url, true)
	
	      if (request.credentials === 'include') {
	        xhr.withCredentials = true
	      }
	
	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob'
	      }
	
	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value)
	      })
	
	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
	    })
	  }
	  self.fetch.polyfill = true
	})(typeof self !== 'undefined' ? self : this);
	
	
	/*** EXPORTS FROM exports-loader ***/
	module.exports = global.fetch
	}.call(global));
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }
/******/ ]);
//# sourceMappingURL=app.min.js.map